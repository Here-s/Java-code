class A {
    private int a;
}
class B extends A {
    public void func() {
        //System.out.println(this.a);//可以发现并没有被继承
    }
}

public class ObjectOriented {

    public static void main(String[] args) {
        //继承：对共性的抽取，使用 extends 关键字来实现
        //语法：A extends B
        // A：子类，派生类
        // B：基类，超类
        // 意义：为了代码的复用

        //多态：
        // 向上转型：父类引用 引用子类的对象
        // 运行时绑定：通过父类引用，调用父类和子类同名的覆盖方法
        //覆盖/覆写/重写
        //a：方法名相同
        //b：参数列表相同（参数的个数 + 参数的类型
        //c：返回值相同（返回值也可以是协变类型）
        //注意：
        // 1：static 方法不能重写
        // 2: static 修饰的方法
        // 3: final 修饰的方法
        // 4: 子类方法的访问权限要大于等于父类的访问权限

        //编译时绑定：通过函数的重载实现，编译的时候，会根据你给的参数和个数类型，
        // 在编译期，确定你最终调用的一个方法

        //注意：子类继承了父类，那么子类在构造的时候，需要先帮助父类进行构造，需要在子类的构造方法当中，
        // 使用 super 关键字来显示调用父类的构造方法
        //2 super 和 this 的区别？ 重写和重载的区别？
        //3 讲解了访问修饰限定符：private  包访问权限：protected public
        //包访问权限：什么都不写，只能在同一个宝里面访问
        //protected：不同包，必须是子类才能访问。
        //父类的 private 修饰的成员变量是否被继承了？ 在子类当中是访问不到的 所以可以认为是不被继承

        //向下转型：不安全的。instanceof
    }
}
