public class MethodThree {
    public static int fac(int n){//执行原理 进来之后 n不等于1 执行下面的   函数的调用 是在栈上开辟空间 就是栈帧  栈区就是先进后出
        //递归  能递下来 也能归回去
        if(n==1){
            return 1;//如果没有结束条件的话 就会把栈区占满
        }
        else{
            return n*fac(n-1);//n乘n-1的阶乘   执行5*这个函数的返回值 也就是调用这个函数 调用函数自己
        }
    }
    public static void main(String[] args) {
        //一个方法在执行过程中调用自身，就称为递归  重要 相当于把大的问题化为小的问题 因为大问题和小问题的处理方式是一样的
        //1 要调用本身  2 要有一个趋近于终止的条件  3 推导出递归的公式
        //递归相当于数学上的数学归纳法，有一个起始条件，然后有一个递推公式
        //例如 求N！ 其实条件：N=1的时候 N！为1，这个起始条件相当于递归的结束条件
        //递归公式：求N！ 直接不好求，可以把问题转换成N！=>N*(N-1)!

        //例：求n的阶乘  3!=3*2!  2!=2*1!  n!=n*(n-1)!  这样就是化为小问题 小问题的处理方式和大问题的处理方式是一样的
        System.out.println(fac(5));
    }
}
